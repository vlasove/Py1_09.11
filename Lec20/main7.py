"""
Замыкание (closure) - процесс проброса локальной переменной в более глубокую локальную область , с порождением
функционального объекта, замкнутого на вышестоящую локаль.

Процесс создания замыкания/использования локалей - карринг.
"""
"""
Задача - создать фукнцию которая складывает 6 чисел
Но вам известно, что первые 5 чисел почти всегда одни и те же
1) 1-ый вариант my_adder(10, 20, 30, 40, 50, 2)
                my_adder(10, 20, 30, 40, 50, 3)
                my_adder(10, 20, 30, 40, 50, 4)
    тут беда в том, что придется постоянно с собой таскать набор параметров,
    которые редко меняются
2) 2-ой вариант 
def my_adder(f):
    a = 10
    b = 20
    c = 30
    d = 40
    e = 50
    .....
    тут беда в том, что не могу a,b,c,d,e поменять извне
3) 3-ий вариант
создать замыкание на первые 5 параметров и порождать функцию с одним аргументом!!!!!!!!
"""

def create_adder(a:int, b:int, c:int, d:int, e:int):
    """
    Локальная область видимости 1-го уровня. В ней видны все глобалы, но не видно , что там ниже
    """
    def add2(f:int):
        """
        Локальная область видимости 2-го уровня. В ней видны все глобалы + все локалы 1-го уровня
        """
        return a + b + c + d + e + f
    return add2

create_adder(10, 20, 30, 40, 50)(6)

adder150 = create_adder(10, 20, 30, 40, 50)
# def adder10(b:int):
#   return b + 10
for i in range(1, 10):
    print(i, " + 150 = ", adder150(i))

adder15 = create_adder(1,2,3,4,5)
# def adder15(b:int):
#   return b + 15
for j in range(1, 10):
    print(j, " + 15 = ", adder15(j))


